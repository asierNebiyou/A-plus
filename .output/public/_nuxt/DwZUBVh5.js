import{f as $,C as c,D as A,E as C,G as L,r as R,n as B,c as f,o as d,a as p,F as U,k as j,t as g}from"./Byu8kLTl.js";import{u as G}from"./fb3yC4jI.js";function M(n,r,u){const[t={},a]=[{},r],e=$(()=>c(n)),o=t.key||A([a,typeof e.value=="string"?e.value:"",...J(t)]);if(!o||typeof o!="string")throw new TypeError("[nuxt] [useFetch] key must be a string: "+o);const i=o===a?"$f"+o:o;if(!t.baseURL&&typeof e.value=="string"&&e.value[0]==="/"&&e.value[1]==="/")throw new Error('[nuxt] [useFetch] the request URL must not start with "//".');const{server:_,lazy:x,default:v,transform:w,pick:k,watch:h,immediate:D,getCachedData:E,deep:O,dedupe:q,...F}=t,m=C({...L,...F,cache:typeof t.cache=="boolean"?void 0:t.cache}),T={server:_,lazy:x,default:v,transform:w,pick:k,immediate:D,getCachedData:E,deep:O,dedupe:q,watch:h===!1?[]:[m,e,...h||[]]};let s;return G(i,()=>{var b;(b=s==null?void 0:s.abort)==null||b.call(s,new DOMException("Request aborted as another request to the same endpoint was initiated.","AbortError")),s=typeof AbortController<"u"?new AbortController:{};const y=c(t.timeout);let l;return y&&(l=setTimeout(()=>s.abort(new DOMException("Request aborted due to timeout.","AbortError")),y),s.signal.onabort=()=>clearTimeout(l)),(t.$fetch||globalThis.$fetch)(e.value,{signal:s.signal,...m}).finally(()=>{clearTimeout(l)})},T)}function J(n){var u;const r=[((u=c(n.method))==null?void 0:u.toUpperCase())||"GET",c(n.baseURL)];for(const t of[n.params||n.query]){const a=c(t);if(!a)continue;const e={};for(const[o,i]of Object.entries(a))e[c(o)]=c(i);r.push(e)}return r}const S={class:"p-6"},V={class:"text-xl text-text"},z={class:"text-lg text-text"},H={__name:"blog",setup(n){const r=R([]);return B(async()=>{const{data:u}=await M("/api/blog","$JbyJGr6ky2");r.value=u.value}),(u,t)=>(d(),f("div",S,[t[0]||(t[0]=p("h1",{class:"text-3xl font-bold text-primary"},"Blog Posts",-1)),(d(!0),f(U,null,j(r.value,a=>(d(),f("div",{key:a.id,class:"mt-4 p-4 border rounded-lg"},[p("h2",V,g(a.title),1),p("p",z,g(a.content),1)]))),128))]))}};export{H as default};
